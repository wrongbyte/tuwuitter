"""Root of queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  users(after: String, first: Int, before: String, last: Int): UserConnection!
  me: User
  FindUsersQuery: [User]
  VersionQuery: String!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type UserConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
}

"""A connection to a list of items."""
interface Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User

  """A cursor for use in pagination."""
  cursor: String!
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  username: String!
  displayName: String
  birthday: String!
  email: String!
  password: String!
}

"""Root of mutations"""
type Mutation {
  """Creates a new user"""
  CreateUserMutation(input: CreateUserInput!): CreateUserPayload

  """Logs in an user or raises an error"""
  userLoginMutation(input: UserLoginInput!): UserLoginPayload

  """Posts a new tweet"""
  CreateTweetMutation(input: CreateTweetInput!): CreateTweetPayload
}

type CreateUserPayload {
  user: User
  clientMutationId: String
}

input CreateUserInput {
  username: String!
  displayName: String!
  birthday: String!
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginPayload {
  token: String
  me: User
  clientMutationId: String
}

input UserLoginInput {
  username: String!
  password: String!
  clientMutationId: String
}

type CreateTweetPayload {
  tweet: Tweet
  clientMutationId: String
}

type Tweet {
  author: String!
  content: String!
  likedBy: [String]
  retweetedBy: [String]
  replies: [String]
}

input CreateTweetInput {
  author: String!
  content: String!
  replies: [String]
  clientMutationId: String
}