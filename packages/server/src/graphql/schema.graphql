"""Root of queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  tweets(after: String, first: Int, before: String, last: Int): TweetConnection!
  me: User
  findUserByUsername(username: String): User
  VersionQuery: String!
  findTimelineTweets(after: String, first: Int, before: String, last: Int): TweetConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type TweetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TweetEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type TweetEdge {
  """The item at the end of the edge"""
  node: Tweet

  """A cursor for use in pagination"""
  cursor: String!
}

type Tweet implements Node {
  """The ID of an object"""
  id: ID!
  author: User
  content: String!
  likedBy: [String]
  retweetedBy: [String]
  replies: [String]
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  username: String!
  displayName: String
  email: String!
  password: String!
  following: [String]
  followers: [String]
  tweets(after: String, first: Int, before: String, last: Int): TweetConnection!
}

"""Root of mutations"""
type Mutation {
  """Creates a new user"""
  CreateUserMutation(input: CreateUserInput!): CreateUserPayload

  """Logs in an user or raises an error"""
  userLoginMutation(input: UserLoginInput!): UserLoginPayload

  """
  Adds the target user to the list of followed accounts of current user logged in
  """
  FollowUserMutation(input: FolowUserInput!): FolowUserPayload

  """Posts a new tweet"""
  CreateTweetMutation(input: CreateTweetInput!): CreateTweetPayload
}

type CreateUserPayload {
  user: User
  clientMutationId: String
}

input CreateUserInput {
  username: String!
  displayName: String!
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginPayload {
  token: String
  me: User
  clientMutationId: String
}

input UserLoginInput {
  username: String!
  password: String!
  clientMutationId: String
}

type FolowUserPayload {
  user: User
  clientMutationId: String
}

input FolowUserInput {
  username: String!
  clientMutationId: String
}

type CreateTweetPayload {
  tweet: Tweet
  clientMutationId: String
}

input CreateTweetInput {
  content: String!
  replies: [String]
  clientMutationId: String
}